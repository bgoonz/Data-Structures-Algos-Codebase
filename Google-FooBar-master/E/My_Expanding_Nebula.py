'''
lkup = {
(4, 10)	:	{96, 160, 261, 163, 99, 517, 262, 263, 519, 521, 522, 523, 267, 266, 265, 518, 144, 80, 83, 147},
(4, 7)	:	{33, 388, 802, 900, 324, 836, 644, 584, 392, 328, 904, 840, 648, 580, 34, 17, 18, 786, 785, 801},
(4, 8)	:	{512, 515, 524, 525, 526, 527, 560, 563, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 101, 102, 103, 105, 106, 107, 108, 109, 110, 111, 112, 115, 117, 118, 119, 121, 122, 123, 124, 125, 126, 127, 149, 150, 151, 153, 154, 155, 156, 157, 158, 159, 165, 166, 167, 169, 170, 171, 172, 173, 174, 175, 176, 179, 181, 182, 183, 185, 186, 187, 188, 189, 190, 191, 256, 259, 268, 269, 270, 271, 304, 307, 309, 310, 311, 313, 314, 315, 316, 317, 318, 319},
(4, 5)	:	{833, 385, 642, 386, 804, 36, 897, 577, 808, 40, 322, 834, 898, 321, 792, 20, 788, 24, 641, 578},
(4, 14)	:	{544, 288, 547, 291, 69, 134, 71, 135, 73, 74, 139, 75, 138, 137, 70, 272, 528, 275, 531, 133},
(2, 1)	:	{1, 2, 36, 40, 49, 50, 52, 20, 24, 56},
(4, 12)	:	{128, 131, 535, 281, 140, 141, 142, 143, 538, 533, 278, 279, 534, 537, 282, 539, 284, 541, 286, 543, 542, 287, 285, 540, 283, 549, 294, 295, 551, 297, 298, 555, 299, 556, 558, 303, 559, 301, 300, 302, 557, 64, 67, 293, 76, 77, 78, 79, 550, 553, 554, 277},
(2, 3)	:	{33, 34, 4, 8, 17, 18},
(4, 2)	:	{458, 967, 713, 773, 774, 459, 7, 714, 9, 867, 969, 779, 11, 777, 400, 912, 970, 915, 403, 659, 971, 656, 5, 336, 464, 672, 416, 928, 592, 675, 419, 931, 720, 6, 10, 775, 197, 710, 455, 454, 457, 201, 203, 199, 711, 202, 715, 976, 848, 208, 467, 211, 979, 851, 723, 595, 339, 778, 736, 352, 992, 483, 227, 995, 739, 224, 611, 480, 355, 198, 453, 709, 608, 965, 864, 966},
(1, 0)	:	{0, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15},
(4, 11)	:	{97, 162, 98, 260, 516, 161, 520, 264, 81, 82, 145, 146},
(4, 0)	:	{0, 3, 12, 13, 14, 15, 48, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63, 192, 195, 204, 205, 206, 207, 213, 214, 215, 217, 218, 219, 220, 221, 222, 223, 229, 230, 231, 233, 234, 235, 236, 237, 238, 239, 240, 243, 245, 246, 247, 249, 250, 251, 252, 253, 254, 255, 341, 342, 343, 345, 346, 347, 348, 349, 350, 351, 357, 358, 359, 361, 362, 363, 364, 365, 366, 367, 368, 371, 373, 374, 375, 377, 378, 379, 380, 381, 382, 383, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 421, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 435, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 451, 460, 461, 462, 463, 469, 470, 471, 473, 474, 475, 476, 477, 478, 479, 485, 486, 487, 489, 490, 491, 492, 493, 494, 495, 496, 499, 501, 502, 503, 505, 506, 507, 508, 509, 510, 511, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 627, 629, 630, 631, 633, 634, 635, 636, 637, 638, 639, 661, 662, 663, 665, 666, 667, 668, 669, 670, 671, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 691, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 707, 716, 717, 718, 719, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 741, 742, 743, 745, 746, 747, 748, 749, 750, 751, 752, 755, 757, 758, 759, 761, 762, 763, 764, 765, 766, 767, 768, 771, 780, 781, 782, 783, 816, 819, 821, 822, 823, 825, 826, 827, 828, 829, 830, 831, 853, 854, 855, 857, 858, 859, 860, 861, 862, 863, 869, 870, 871, 873, 874, 875, 876, 877, 878, 879, 880, 883, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 933, 934, 935, 937, 938, 939, 940, 941, 942, 943, 944, 947, 949, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 963, 972, 973, 974, 975, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 997, 998, 999, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1011, 1013, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023},
(4, 9)	:	{257, 258, 514, 513, 561, 148, 152, 164, 168, 177, 306, 178, 180, 564, 562, 308, 312, 568, 184, 84, 88, 100, 104, 113, 114, 116, 120, 305},
(4, 6)	:	{901, 390, 903, 389, 393, 906, 651, 902, 907, 650, 649, 784, 16, 395, 787, 19, 32, 800, 803, 35, 645, 391, 646, 647, 394, 325, 581, 326, 837, 585, 582, 583, 842, 331, 587, 843, 330, 586, 841, 905, 327, 329, 838, 839},
(4, 15)	:	{289, 290, 546, 68, 132, 545, 136, 72, 273, 274, 530, 529},
(4, 4)	:	{640, 896, 789, 643, 387, 26, 899, 790, 384, 333, 397, 654, 655, 396, 909, 910, 653, 399, 21, 793, 791, 23, 25, 794, 795, 28, 29, 30, 799, 31, 798, 797, 796, 27, 805, 806, 39, 807, 41, 810, 42, 43, 813, 46, 47, 44, 815, 814, 45, 812, 37, 832, 320, 576, 323, 835, 579, 38, 332, 844, 589, 591, 588, 847, 590, 846, 335, 334, 845, 398, 652, 908, 809, 911, 22, 811},
(4, 13)	:	{129, 66, 130, 548, 292, 65, 552, 536, 296, 276, 532, 280},
(2, 0)	:	{0, 3, 12, 13, 14, 15, 21, 22, 23, 25, 26, 27, 28, 29, 30, 31, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 51, 53, 54, 55, 57, 58, 59, 60, 61, 62, 63},
(4, 3)	:	{865, 772, 993, 4, 776, 8, 401, 914, 402, 657, 658, 913, 209, 417, 418, 674, 929, 930, 673, 593, 721, 452, 708, 196, 964, 200, 968, 712, 456, 465, 849, 594, 978, 466, 337, 722, 338, 850, 977, 210, 737, 353, 738, 226, 481, 610, 994, 225, 354, 482, 866, 609},
(2, 2)	:	{32, 35, 5, 6, 7, 9, 10, 11, 16, 19},
(4, 1)	:	{1, 2, 49, 50, 52, 56, 596, 600, 612, 616, 625, 626, 628, 632, 660, 664, 676, 680, 689, 690, 692, 696, 705, 706, 194, 193, 212, 724, 728, 216, 740, 228, 744, 232, 241, 242, 753, 754, 756, 244, 248, 760, 769, 770, 817, 818, 820, 824, 852, 340, 856, 344, 868, 356, 360, 872, 369, 370, 882, 372, 881, 884, 376, 888, 404, 916, 408, 920, 932, 420, 936, 424, 433, 434, 946, 436, 948, 945, 440, 952, 449, 450, 962, 961, 980, 468, 472, 984, 996, 484, 488, 1000, 504, 497, 1010, 498, 500, 1012, 1009, 1016},
(1, 1)	:	{8, 1, 2, 4},
}
'''

from lkup2 import lkup

def row(arry):
    st = bin(len(arry))[2:][::-1]
    ln = len(st)
    ar  = [2**i for i in range(ln) if st[i]=='1'][::-1]

    #if ar[0]==8:
    #    ar=[4,4]+ar[1:]

    su = 0
    nw = []

    for i in range(len(ar)):
        nw.append( ( ar[i],int(''.join( arry[ su:su+ar[i] ] ),2) ) )
        su += ar[i]

    arry = nw

    res = lkup[arry[0]]
    for k in range(1,len(arry)):

        res2 = set()
        ln = arry[k][0]

        shft_val = 4 + 2*(ln-1) - 2
        msk = 2**shft_val-1
        for i in res:
            for j in lkup[arry[k]]:
                chk = j >> shft_val
                if (i & 3) == chk:
                    res2.add( (i<<shft_val) | (j&msk) )

        res = res2

    return res


def answer(grid):
    
    if len(grid[0])>len(grid):
        grid =  list(map(list, zip(*grid)))
    

    W,L = len(grid[0]),len(grid)
    
    grid = [[('1' if grid[j][i]==True else '0') for i in range(W)] for j in range(L)]

    memo   = { }
    memo_2 = { }
    
    for i in range(L):
        key = int( ''.join(grid[i]) , 2 )
        if key in memo:
            memo[key].append(i)
        else:
            memo[key] = [ ]

    memo   = { k:v for k,v in memo.items() if v!=[] }

    uppr_msk = int('10'*(2+2*W),2)
    lwr_msk  = int('01'*(2+2*W),2)

    r1 = row(grid[0])
    
    key = int( ''.join(grid[i]) , 2 )

    if key in memo:
        memo_2[key] = r1

    res = { }
    for k in r1:
        n_k = k&lwr_msk
        if n_k in res:
            res[n_k] += 1
        else:
            res[n_k] = 1

    for i in range(1,L):

        key = int( ''.join(grid[i]) , 2 )

        if key in memo:
            if key in memo_2:
                r1 = memo_2[key]
            else:
                memo_2[key] = r1 = row(grid[i])
        else:
            r1 = row(grid[i])
            
        r1 = row(grid[i])
        r2 = { k for k in r1 if (k&uppr_msk)>>1 in res }

        res_2 = { }
        for k in r2:
            n_k = k&lwr_msk
            if n_k in res_2:
                res_2[n_k] += res[(k&uppr_msk)>>1]
            else:
                res_2[n_k] = res[(k&uppr_msk)>>1]

        res = res_2
    
    return sum(res.values())


import random,time
    
rnd = random.Random()

def f(x,y):
    init = time.clock()
    return answer([[(True if rnd.randint(0,1) else False) for i in range(x)] for j in range(y)]) , time.clock()-init
